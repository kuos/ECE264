
/**
 * The ENTIRE assignment should be completed within this file
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <pthread.h>

#include "pa06.h"

/**
 * Read a uint128 from a string.
 * This function is provided for your convenience.
 */
uint128 alphaTou128(const char * str)
{
    uint128 ret = 0;
    while(*str >= '0' && *str <= '9') 
      {
	ret *= 10; // "left-shift" a base-ten number
	ret += (*str - '0'); // add in the units
	++str;
      }
    return ret;
}

/**
 * The caller is responsible for freeing the result 
 */
/*
char * u128ToString(uint128 value)
{
  char * str = ;
  
  while(


  free(
  return NULL;
}
*/



/**
 * Test is 'value' is prime.
 * 'n_threads' is the number of threads to create to complete this computation.
 * Return TRUE of FALSE.
 * 
 * LEAK NO MEMORY
 *
 * Good luck!
 */
int primalityTestParallel(uint128 value, int n_threads)
{

    if (value % 2 == 0) 
       return FALSE;

    uint128 max = floor(sqrt(value));
    uint128 i;

    for (i = 3; i < max; i+=2) 
    {
	if (value % i  == 0) 
	  return FALSE;
    }	

    return TRUE;
}


/*FROM WEBPAGE:
You will need to modify this function to make it
parallel. Furthermore, this function deals with puny "long int"
numbers. We'll want more juice than that. So you will also have to
modify this function to use 128 bit integers. */

/*If you want to test if a number is divisible (exactly) by numbers 
in the range [0..n], then you can split this range into chunks, 
and test each chunk in a separate thread. If /any/
chunk of the computation finds a factor, then the number is not prime.*/


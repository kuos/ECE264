SHU-HAO (HOWARD) KUO PUID: 00164-19226
------------------------------------------------------------------
ECE 264 - SUMMER 2013 - PROGRAMMING ASSIGNMENT 05
------------------------------------------------------------------
(Derived from an assignment by Professor Vijay Raghunathan)

INTRODUCTION
============
Functions created are based on the widely used algorithmic technique
of Huffman coding, which is used in JPEG compression as well as in MP3
audio compression. 

ASSIGNMENT
==========
The  program takes a compressed file, reads the Huffman tree
specified by the header, and print the traverse of the Huffman Tree
to an output file. The header can be either character-based 
representation or bit-based representation. 

FUNCTIONS USED:
===============
1. Stack * pop (Stack * top)
   This function will pop a element from stack (free it) and return the next stack as new top of stack.

2. Stack * push (Stack * top, HuffNode * node)
   This function will create a new stack with a tree node as input, and push onto the stack as new top of stack.

3. HuffNode * HuffNode_create(char value)
   This function will create a new HuffNode with a data input (character) and everything else initialized to NULL.

4. HuffNode * Create_CharTree(FILE * f_ch)
   This function will create the tree using a character file, detail in the algorithm portion.

5. HuffNode * Create_BitTree(FILE * f_bit);
   This function is very similar to Create_CharTree, but instead  will create the tree using a binary file.
   In the function instead of using fgetc, a new function is used (getBit) detail in the algorithm portion.

6. char getBit(FILE * f_bit, int size, int * counter, unsigned char * first)
   This function is used in Create_BitTree function to read a specified bits (size) at a time, 
   while keeping count of the bit index, last data (for further additional bits), from a binary file.

7. void tree_destroy(HuffNode * tree);
   This is a destroy function, so at the end of the program the tree is traversed and freed.

8. void Huff_postOrderPrint(FILE * f_out, HuffNode *tree);
   This function will print the final tree structure to an output file as requested by the assignment.

9. void print_bits(char * filename);
   This is a debugger function to print of the binary bits of the file 8 bits in a line,
   helps to determine if the binary tree is created properly. 


FUNCTION/PROGRAM Algorithm:
============================
- Stack is used to maintain/keeptrack of a list of Nodes.
- Using HuffNode_create to create a node with the neccessary value (characters), may be containing nothing (0) as well.
- Using pop and push function for stack operations.

-Trees are created in two different file types:

1. Character file
   In a character file, the commands are read in each byte.
   These bytes are used to determine the operations done on them.
   A "1" will mean to read the next byte as data, create a node using that data, and pushing it onto stack.
   A "0" will mean to pop the stack, if stack is empty the tree is completed (return tree),
    if it is not, pop another from the stack and create a new node which points to the nodes of the previous two.

2. Binary file
   In a binary file, the commands are read in each bit, while data remain in size of 1 byte.
   Since C only allow obtaining byte using functions, a new function is intruduced "getBit"
   This function will allow use to pass in the binary file, the amount of bits they want,
   a index counter which keeps track of which bit was pointing to, and as well as a character (data) array which
   keeps track of the past values used, so additional bits can be added onto it.

   Similar to character file, the bits read from command are used to determine operations done:
   A "1" will mean to read the next byte as data, create a node using that data, and pushing it onto stack.
   A "0" will mean to pop the stack, if stack is empty the tree is completed (return tree),
    if it is not, pop another from the stack and create a new node which points to the nodes of the previous two.

At the end, both create functions will have completed a tree (Huffman Coding Tree) and a print function will be called.
After it prints out the structures of a tree to a file, the tree is then freed, files are closed and the assignement has been completed!!
